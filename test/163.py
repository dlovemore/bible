>>> from bible import *
>>> 23**(164**.5)
2.745522601206402e+17
>>> log(33)/log(23)
<3>:1: NameError: name 'log' is not defined
>>> from math import *
>>> log(33)/log(23)
1.1151376212729993
>>> exp(_)
3.0499878935177485
>>> 23**1.1151376
32.99999779885498
>>> 23**1.115137621273
33.000000000000064
>>> 23**1.11513762127993
33.00000000071712
>>> 23**1.115137621272993
32.99999999999935
>>> 23**1.115137621273
33.000000000000064
>>> Decimal=decimal.Decimal
>>> decimal.
invalid syntax (<13>, line 1)
>>> decimal.getcontext(
... )
Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])
>>> _.
invalid syntax (<15>, line 1)
>>> _.prec
28
>>> _.prec=77
<17>:1: AttributeError: 'int' object has no attribute 'prec'
>>> decimal.getcontext().prec=77
>>> Decimal(23)**Decimal(1)
Decimal('23')
>>> Decimal(23)**Decimal('1.115137621273')
Decimal('33.000000000000065216269700152044425321346140441754589351518499144203310358288')
>>> Decimal(23)**Decimal('1.1151376212730')
Decimal('33.000000000000065216269700152044425321346140441754589351518499144203310358288')
>>> Decimal(23)**Decimal('1.11513762127299')
Decimal('32.999999999999030503178443546823291292524986382360786117846131450808693422654')
>>> Decimal(23)**Decimal('1.115137621272999')
Decimal('32.999999999999961744960574490062360307712453687156741523088950190736042769477')
>>> Decimal(23)**Decimal('1.1151376212729999')
Decimal('33.000000000000054869138787585831619303875255901745115469040586113586376570643')
>>> Decimal(23)**Decimal('1.1151376212729995')
Decimal('33.000000000000013480615137321012838603119530790994195090347523332119557992015')
>>> Decimal(23)**Decimal('1.1151376212729994')
Decimal('33.000000000000003133484224754816254270212552770541908971203298665076581350768')
>>> Decimal(23)**Decimal('1.1151376212729993')
Decimal('32.999999999999992786353312188622914274218356050949280517360449002956950386073')
>>> Decimal(23)**Decimal('1.11513762127299934')
Decimal('32.999999999999996925205677215099860952186500982748277616658551563640067901325')
>>> Decimal(23)**Decimal('1.11513762127299936')
Decimal('32.999999999999998994631859728338528951385340326658665227727480534903827331889')
>>> Decimal(23)**Decimal('1.11513762127299938')
Decimal('33.000000000000001064058042241577326724060690922587162986009182581492496882065')
>>> Decimal(23)**Decimal('1.11513762127299937')
Decimal('33.000000000000000029344950984957911616038451718120141708485507363690102839824')
>>> Decimal(23)**Decimal('1.11513762127299936')
Decimal('32.999999999999998994631859728338528951385340326658665227727480534903827331889')
>>> Decimal(23)**Decimal('1.115137621272999364')
Decimal('32.999999999999999408517096230986278124042289545682655549056410587429461146516')
>>> Decimal(23)**Decimal('1.115137621272999368')
Decimal('32.999999999999999822402332733634032487638299214787435380911448690658189240885')
>>> Decimal(23)**Decimal('1.115137621272999369')
Decimal('32.999999999999999925873641859295971889621529827388761329344631012789182213982')
>>> Decimal(23)**Decimal('1.1151376212729993699')
Decimal('33.000000000000000018997820072391717628797243421531151192197664567334438152144')
>>> Decimal(23)**Decimal('1.1151376212729993694')
Decimal('32.999999999999999967262165509560747741256255630305706892349500372210427613213')
>>> Decimal(23)**Decimal('1.1151376212729993696')
Decimal('32.999999999999999987956427334693135686539640008451982960039595942749650080635')
>>> Decimal(23)**Decimal('1.1151376212729993697')
Decimal('32.999999999999999998303558247259329664047837566697071818991968819319331980724')
>>> Decimal(23)**Decimal('1.1151376212729993698')
Decimal('33.000000000000000008650689159825523644800372037723461229372238373362554601889')
>>> Decimal(23)**Decimal('1.1151376212729993697')
Decimal('32.999999999999999998303558247259329664047837566697071818991968819319331980724')
>>> Decimal(23)**Decimal('1.11513762127299936974')
Decimal('33.000000000000000002442410612285807255959530925573871516915762481742309411019')
>>> Decimal(23)**Decimal('1.11513762127299936972')
Decimal('33.000000000000000000372984429772568459938797507879845656921238677131529400619')
>>> Decimal(23)**Decimal('1.11513762127299936971')
Decimal('32.999999999999999999338271338515949061977095852724552235198955634856835426963')
>>> Decimal(23)**Decimal('1.115137621272999369714')
Decimal('32.999999999999999999752156575018596821157883310491332043225976338000352666403')
>>> Decimal(23)**Decimal('1.115137621272999369718')
Decimal('33.000000000000000000166041811521244580343861707318561932135509542059417517925')
>>> Decimal(23)**Decimal('1.115137621272999369716')
Decimal('32.999999999999999999959099193269920700750223641522390727570424808375591820173')
>>> Decimal(23)**Decimal('1.115137621272999369717')
Decimal('33.000000000000000000062570502395582640546880457574837264825387133673950123491')
>>> Decimal(23)**Decimal('1.1151376212729993697164')
Decimal('33.000000000000000000000487716920185476668847435900415966865790593629119647694')
>>> Decimal(23)**Decimal('1.1151376212729993697162')
Decimal('32.999999999999999999979793455095053088709529050037577784617004515616772951393')
>>> Decimal(23)**Decimal('1.1151376212729993697163')
Decimal('32.999999999999999999990140586007619282689186620800540485091121757767920622681')
>>> Decimal(23)**Decimal('1.1151376212729993697164')
Decimal('33.000000000000000000000487716920185476668847435900415966865790593629119647694')
>>> Decimal(23)**Decimal('1.11513762127299936971635')
Decimal('32.999999999999999999995314151463902379679016622808364128315887226421184968318')
>>> Decimal(23)**Decimal('1.11513762127299936971638')
Decimal('32.999999999999999999998418290737672237872915013333487848006812698911247256196')
>>> Decimal(23)**Decimal('1.11513762127299936971639')
Decimal('32.999999999999999999999453003828928857270881208395267343529798888297055525345')
>>> Decimal(23)**Decimal('1.115137621272999369716394')
Decimal('32.999999999999999999999866889065431505030067695504122497526634908516273505343')
>>> Decimal(23)**Decimal('1.115137621272999369716398')
Decimal('33.000000000000000000000280774301934152789254187803916711973551811286957526490')
>>> Decimal(23)**Decimal('1.115137621272999369716397')
Decimal('33.000000000000000000000177302992808490849457564242317621444627502855083019436')
>>> Decimal(23)**Decimal('1.115137621272999369716396')
Decimal('33.000000000000000000000073831683682828909660941005152222193833249582678191733')
>>> Decimal(23)**Decimal('1.115137621272999369716395')
Decimal('32.999999999999999999999970360374557166969864318092420514221169051469742026122')
>>> Decimal(23)**Decimal('1.1151376212729993697163956')
Decimal('33.000000000000000000000032443160032564133742291801127496051391963718367543004')
>>> Decimal(23)**Decimal('1.1151376212729993697163953')
Decimal('33.000000000000000000000001401767294865551803304932174489028764655111878726813')
>>> Decimal(23)**Decimal('1.1151376212729993697163952')
Decimal('32.999999999999999999999991054636382299357823642649012160513451486679571815105')
>>> Decimal(23)**Decimal('1.11513762127299936971639526')
Decimal('32.999999999999999999999997262914929839074211440018520237193105631672764600647')
>>> Decimal(23)**Decimal('1.11513762127299936971639528')
Decimal('32.999999999999999999999999332341112352313007372475282476372679517381289770144')
>>> Decimal(23)**Decimal('1.11513762127299936971639529')
Decimal('33.000000000000000000000000367054203608932405338703712261016158179743826275081')
>>> Decimal(23)**Decimal('1.11513762127299936971639528')
Decimal('32.999999999999999999999999332341112352313007372475282476372679517381289770144')
>>> exp(pi)
23.140692632779267
>>> 23**163
915455568787886024704697214447309838482540815462309625911316526159013739091784513976726887743844910950030085766103956182511232658679889963596831898622448569036387689561334594580512964619496863737394865358108099707614239367
>>> _23__163=Decimal(_)
>>> Decimal(23)**(Decimal(163)**Decimal('0.5'))
Decimal('242871854448014842.98195410888522522362565028863295613854595867446934095269680')
>>> import pi
<72>:1: ModuleNotFoundError: No module named 'pi'
>>> import parle.pi
<73>:1: ModuleNotFoundError: No module named 'parle.pi'
>>> import bible.pi
>>> pistr[:78]
<75>:1: NameError: name 'pistr' is not defined
>>> bible.pi.pistr[:78]
'314159265358979323846264338327950288419716939937510582097494459230781640628620'
>>> '3.'+bible.pi.pistr[1:78]
'3.14159265358979323846264338327950288419716939937510582097494459230781640628620'
>>> pi=Decimal('3.'+bible.pi.pistr[1:78])
>>> bible.pi.e
e
>>> bible.pi.e
e
>>> Genesis[1:1:2].words()@count
[23, 33, 81, 26, 56, 33, 55, 19, 33, 52, 19, 33, 52, 43, 116, 52, 19, 50, 19, 91, 43, 66, 33, 15, 21, 33, 30, 19, 33, 91, 21, 26, 59, 66, 33, 15, 21, 33, 86]
>>> tale(_)
[23, 56, 137, 163, 219, 252, 307, 326, 359, 411, 430, 463, 515, 558, 674, 726, 745, 795, 814, 905, 948, 1014, 1047, 1062, 1083, 1116, 1146, 1165, 1198, 1289, 1310, 1336, 1395, 1461, 1494, 1509, 1530, 1563, 1649]
>>> 411-326
85
>>> 85*2
170
>>> 85*4
340
>>> ns(163)
[163] [38]
>>> Genesis[1:1].tell(ascsum)
 In the beginning God created the heaven and the earth.  =
183 321    945    282   728   321  631   307 321  532   4571
>>> ns(4571)
[7, 653] [4, 119]
>>> 4571+46
4617
>>> 4617*ns
[3, 3, 3, 3, 3, 19] [2, 2, 2, 2, 2, 8]
>>> 3**5
243
>>> 243*19
4617
>>> 4571+46+32*9
4905
>>> _*ns
[3, 3, 5, 109] [2, 2, 3, 29]
>>> Genesis[1:1].tells()
In the beginning God created the heaven and the earth.  =
2   3      9      3     7     3    6     3   3    5     44
23  33     81     26    56    33   55    19  33   52   411
59 213    189     71   308   213  469    55 213  304   2094
>>> Genesis[1:1:2].words()@count*tale
<96>:1: TypeError: can't multiply sequence by non-int of type 'function'
>>> Genesis[1:1:2].words()@count*F(tale)
[23, 56, 137, 163, 219, 252, 307, 326, 359, 411, 430, 463, 515, 558, 674, 726, 745, 795, 814, 905, 948, 1014, 1047, 1062, 1083, 1116, 1146, 1165, 1198, 1289, 1310, 1336, 1395, 1461, 1494, 1509, 1530, 1563, 1649]
>>> Genesis[1:1:2].words()@F(ssum)*F(tale)
[59, 272, 461, 532, 840, 1053, 1522, 1577, 1790, 2094, 2149, 2362, 2666, 3267, 4544, 4740, 4795, 5268, 5323, 5693, 6294, 6774, 6987, 7002, 7068, 7281, 7365, 7420, 7633, 8111, 8177, 8248, 8757, 9237, 9450, 9465, 9531, 9744, 10640]
>>> span(20)@mul*3
(3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60)
>>> span(20)@mul*163
(163, 326, 489, 652, 815, 978, 1141, 1304, 1467, 1630, 1793, 1956, 2119, 2282, 2445, 2608, 2771, 2934, 3097, 3260)
>>> Genesis[1].count('e')
39
>>> Genesis[1:1].count('e')
1
>>> 163**.5
12.767145334803704
>>> 163/12
13.583333333333334
>>> 163/13
12.538461538461538
>>> 538461/9999
53.851485148514854
>>> 538461/99999
5.384663846638467
>>> 538461/999999
0.5384615384615384
>>> fr
<109>:1: NameError: name 'fr' is not defined
>>> fr=fractions.Fraction
>>> fr(163,13)
Fraction(163, 13)
>>> fr(163,13)**2
Fraction(26569, 169)
>>> 163-144
19
>>> 163-12*13
7
>>> tallies=Genesis[1:1:2].words()@F(ssum)*F(tale)
>>> tallies@floordiv*23
(2, 11, 20, 23, 36, 45, 66, 68, 77, 91, 93, 102, 115, 142, 197, 206, 208, 229, 231, 247, 273, 294, 303, 304, 307, 316, 320, 322, 331, 352, 355, 358, 380, 401, 410, 411, 414, 423, 462)
>>> 
>>> tallies=Genesis[1:1:2].words()@F(osum)*F(tale)
>>> tallies@floordiv*23
(1, 2, 5, 7, 9, 10, 13, 14, 15, 17, 18, 20, 22, 24, 29, 31, 32, 34, 35, 39, 41, 44, 45, 46, 47, 48, 49, 50, 52, 56, 56, 58, 60, 63, 64, 65, 66, 67, 71)
>>> over=op.truediv
>>> tallies@over*23
<121>:1: TypeError: truediv expected 2 arguments, got 1
/home/pi/python/parle/func.py:14: TypeError: truediv expected 2 arguments, got 1
  __rmatmul__(
    self=Func(<built-in function truediv>)
    left=[23, 56, 137, 163, 219, 252, 307, 326, 359, 411, 430, 463, 5...
  )
/home/pi/python/parle/func.py:111: TypeError: truediv expected 2 arguments, got 1
  dmap(
    f=<built-in function truediv>
    l=[23, 56, 137, 163, 219, 252, 307, 326, 359, 411, 430, 463, 515,...
  )
>>> over=Binop(op.truediv)
>>> tallies@over*23
(1.0, 2.4347826086956523, 5.956521739130435, 7.086956521739131, 9.521739130434783, 10.956521739130435, 13.347826086956522, 14.173913043478262, 15.608695652173912, 17.869565217391305, 18.695652173913043, 20.130434782608695, 22.391304347826086, 24.26086956521739, 29.304347826086957, 31.565217391304348, 32.391304347826086, 34.56521739130435, 35.391304347826086, 39.34782608695652, 41.21739130434783, 44.08695652173913, 45.52173913043478, 46.17391304347826, 47.08695652173913, 48.52173913043478, 49.82608695652174, 50.65217391304348, 52.08695652173913, 56.04347826086956, 56.95652173913044, 58.08695652173913, 60.65217391304348, 63.52173913043478, 64.95652173913044, 65.6086956521739, 66.52173913043478, 67.95652173913044, 71.69565217391305)
>>> tallies@mod*23
(0, 10, 22, 2, 12, 22, 8, 4, 14, 20, 16, 3, 9, 6, 7, 13, 9, 13, 9, 8, 5, 2, 12, 4, 2, 12, 19, 15, 2, 1, 22, 2, 15, 12, 22, 14, 12, 22, 16)
>>> tallies@mod*33
(23, 23, 5, 31, 21, 21, 10, 29, 29, 15, 1, 1, 20, 30, 14, 0, 19, 3, 22, 14, 24, 24, 24, 6, 27, 27, 24, 10, 10, 2, 23, 16, 9, 9, 9, 24, 12, 12, 32)
>>> span(37)@pow*2
<125>:1: TypeError: unsupported operand type(s) for @: 'range' and 'builtin_function_or_method'
>>> pow
<built-in function pow>
>>> pow=Binop(op.pow)
>>> span(37)@pow*2
(1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369)
>>> span(37)@pow*2*F(tale)
[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 506, 650, 819, 1015, 1240, 1496, 1785, 2109, 2470, 2870, 3311, 3795, 4324, 4900, 5525, 6201, 6930, 7714, 8555, 9455, 10416, 11440, 12529, 13685, 14910, 16206, 17575]
>>> span(37)@pow*2*F(tale)@mod(163)
<130>:1: TypeError: binop() missing 1 required positional argument: 'y'
/home/pi/python/parle/func.py:12: TypeError: binop() missing 1 required positional argument: 'y'
  __call__(
    self=Binop(<function Binop.__init__.<locals>.binop at 0xb64a6420>)
  )
    args=(163,)
    kwargs={}
>>> span(37)@pow*2*F(tale)@mod*163
(1, 5, 14, 30, 55, 91, 140, 41, 122, 59, 17, 161, 4, 37, 99, 29, 155, 153, 25, 99, 51, 46, 86, 10, 146, 7, 84, 53, 79, 1, 147, 30, 141, 156, 77, 69, 134)
>>> span(38)@pow*2*F(tale)@mod*163
(1, 5, 14, 30, 55, 91, 140, 41, 122, 59, 17, 161, 4, 37, 99, 29, 155, 153, 25, 99, 51, 46, 86, 10, 146, 7, 84, 53, 79, 1, 147, 30, 141, 156, 77, 69, 134, 111)
>>> span(39)@pow*2*F(tale)@mod*163
(1, 5, 14, 30, 55, 91, 140, 41, 122, 59, 17, 161, 4, 37, 99, 29, 155, 153, 25, 99, 51, 46, 86, 10, 146, 7, 84, 53, 79, 1, 147, 30, 141, 156, 77, 69, 134, 111, 2)
>>> span(74)@pow*2*F(tale)@mod*163
(1, 5, 14, 30, 55, 91, 140, 41, 122, 59, 17, 161, 4, 37, 99, 29, 155, 153, 25, 99, 51, 46, 86, 10, 146, 7, 84, 53, 79, 1, 147, 30, 141, 156, 77, 69, 134, 111, 2, 135, 23, 157, 50, 30, 99, 96, 23, 45, 1, 56, 49, 145, 20, 2, 93, 132, 121, 62, 120, 134, 106, 38, 95, 116, 103, 58, 146, 43, 77, 87, 75, 43, 156, 90)
>>> span(77)@pow*2*F(tale)@mod*163
(1, 5, 14, 30, 55, 91, 140, 41, 122, 59, 17, 161, 4, 37, 99, 29, 155, 153, 25, 99, 51, 46, 86, 10, 146, 7, 84, 53, 79, 1, 147, 30, 141, 156, 77, 69, 134, 111, 2, 135, 23, 157, 50, 30, 99, 96, 23, 45, 1, 56, 49, 145, 20, 2, 93, 132, 121, 62, 120, 134, 106, 38, 95, 116, 103, 58, 146, 43, 77, 87, 75, 43, 156, 90, 10, 81, 142)
>>> span(177)@pow*2*F(tale)@mod*163
(1, 5, 14, 30, 55, 91, 140, 41, 122, 59, 17, 161, 4, 37, 99, 29, 155, 153, 25, 99, 51, 46, 86, 10, 146, 7, 84, 53, 79, 1, 147, 30, 141, 156, 77, 69, 134, 111, 2, 135, 23, 157, 50, 30, 99, 96, 23, 45, 1, 56, 49, 145, 20, 2, 93, 132, 121, 62, 120, 134, 106, 38, 95, 116, 103, 58, 146, 43, 77, 87, 75, 43, 156, 90, 10, 81, 142, 32, 79, 122, 0, 41, 84, 131, 21, 82, 153, 73, 7, 120, 88, 76, 86, 120, 17, 105, 60, 47, 68, 125, 57, 29, 43, 101, 42, 31, 70, 161, 143, 18, 114, 107, 162, 118, 140, 67, 64, 133, 113, 6, 140, 28, 161, 52, 29, 94, 86, 7, 22, 133, 16, 162, 84, 110, 79, 156, 17, 153, 77, 117, 112, 64, 138, 10, 8, 134, 64, 126, 159, 2, 146, 104, 41, 122, 23, 72, 108, 133, 149, 158, 162, 0, 0, 1, 5, 14, 30, 55, 91, 140, 41, 122, 59, 17, 161, 4, 37)
>>> (span(177)@pow*2*F(tale)@mod*163).index(0)
80
>>> (span(81)@pow*2*F(tale)@mod*163).index(0)
80
>>> (span(81)@pow*2*F(tale)@mod*163)
(1, 5, 14, 30, 55, 91, 140, 41, 122, 59, 17, 161, 4, 37, 99, 29, 155, 153, 25, 99, 51, 46, 86, 10, 146, 7, 84, 53, 79, 1, 147, 30, 141, 156, 77, 69, 134, 111, 2, 135, 23, 157, 50, 30, 99, 96, 23, 45, 1, 56, 49, 145, 20, 2, 93, 132, 121, 62, 120, 134, 106, 38, 95, 116, 103, 58, 146, 43, 77, 87, 75, 43, 156, 90, 10, 81, 142, 32, 79, 122, 0)
>>> (span(81)@pow*2@mod*163)
(1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 6, 33, 62, 93, 126, 161, 35, 74, 115, 158, 40, 87, 136, 24, 77, 132, 26, 85, 146, 46, 111, 15, 84, 155, 65, 140, 54, 133, 51, 134, 56, 143, 69, 160, 90, 22, 119, 55, 156, 96, 38, 145, 91, 39, 152, 104, 58, 14, 135, 95, 57, 21, 150, 118, 88, 60, 34, 10, 151, 131, 113, 97, 83, 71, 61, 53, 47, 43, 41)
>>> (span(81)@pow*2*F(tale)@mod*163)
(1, 5, 14, 30, 55, 91, 140, 41, 122, 59, 17, 161, 4, 37, 99, 29, 155, 153, 25, 99, 51, 46, 86, 10, 146, 7, 84, 53, 79, 1, 147, 30, 141, 156, 77, 69, 134, 111, 2, 135, 23, 157, 50, 30, 99, 96, 23, 45, 1, 56, 49, 145, 20, 2, 93, 132, 121, 62, 120, 134, 106, 38, 95, 116, 103, 58, 146, 43, 77, 87, 75, 43, 156, 90, 10, 81, 142, 32, 79, 122, 0)
>>> (span(81)@pow*2*F(tale))
[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 506, 650, 819, 1015, 1240, 1496, 1785, 2109, 2470, 2870, 3311, 3795, 4324, 4900, 5525, 6201, 6930, 7714, 8555, 9455, 10416, 11440, 12529, 13685, 14910, 16206, 17575, 19019, 20540, 22140, 23821, 25585, 27434, 29370, 31395, 33511, 35720, 38024, 40425, 42925, 45526, 48230, 51039, 53955, 56980, 60116, 63365, 66729, 70210, 73810, 77531, 81375, 85344, 89440, 93665, 98021, 102510, 107134, 111895, 116795, 121836, 127020, 132349, 137825, 143450, 149226, 155155, 161239, 167480, 173880, 180441]
>>> (span(81)@pow*2*F(tale)@mod*490)
(1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 16, 160, 329, 35, 260, 26, 315, 149, 20, 420, 371, 365, 404, 0, 135, 321, 70, 364, 225, 145, 126, 170, 279, 455, 210, 36, 425, 399, 450, 90, 301, 105, 484, 460, 35, 191, 440, 294, 245, 295, 446, 210, 79, 55, 140, 336, 155, 89, 140, 310, 111, 35, 84, 260, 75, 21, 100, 314, 175, 175, 316, 110, 49, 135, 370, 266, 315, 29, 390, 420, 121)
>>> (span(81)@pow*2*F(tale)@mod*49)
(1, 5, 14, 30, 6, 42, 42, 8, 40, 42, 16, 13, 35, 35, 15, 26, 21, 2, 20, 28, 28, 22, 12, 0, 37, 27, 21, 21, 29, 47, 28, 23, 34, 14, 14, 36, 33, 7, 9, 41, 7, 7, 43, 19, 35, 44, 48, 0, 0, 1, 5, 14, 30, 6, 42, 42, 8, 40, 42, 16, 13, 35, 35, 15, 26, 21, 2, 20, 28, 28, 22, 12, 0, 37, 27, 21, 21, 29, 47, 28, 23)
>>> (span(81)@pow*2*F(tale)@mod*49).index(0)
23
>>> tallies@mod*49
(23, 7, 39, 16, 23, 7, 13, 32, 16, 19, 38, 22, 25, 19, 37, 40, 10, 11, 30, 23, 17, 34, 18, 33, 5, 38, 19, 38, 22, 15, 36, 13, 23, 40, 24, 39, 11, 44, 32)
>>> tallies=Genesis[1:1:3].words()@F(osum)*F(tale)
>>> tallies@mod*49
(23, 7, 39, 16, 23, 7, 13, 32, 16, 19, 38, 22, 25, 19, 37, 40, 10, 11, 30, 23, 17, 34, 18, 33, 5, 38, 19, 38, 22, 15, 36, 13, 23, 40, 24, 39, 11, 44, 32, 2, 28, 12, 0, 7, 14, 21, 40, 47, 41, 48)
>>> (tallies@mod*49).index(0)
42
>>> (tallies@mod*49).index(33)
23
>>> tallies[23]
1062
>>> tallies[22]
1047
>>> tallies[21]
1014
>>> tallies
[23, 56, 137, 163, 219, 252, 307, 326, 359, 411, 430, 463, 515, 558, 674, 726, 745, 795, 814, 905, 948, 1014, 1047, 1062, 1083, 1116, 1146, 1165, 1198, 1289, 1310, 1336, 1395, 1461, 1494, 1509, 1530, 1563, 1649, 1668, 1694, 1727, 1764, 1820, 1827, 1883, 1902, 1958, 2001, 2057]
>>> (tallies@mod*163)
(23, 56, 137, 0, 56, 89, 144, 0, 33, 85, 104, 137, 26, 69, 22, 74, 93, 143, 162, 90, 133, 36, 69, 84, 105, 138, 5, 24, 57, 148, 6, 32, 91, 157, 27, 42, 63, 96, 19, 38, 64, 97, 134, 27, 34, 90, 109, 2, 45, 101)
>>> set(_)
{0, 2, 133, 5, 6, 134, 137, 138, 143, 144, 19, 148, 22, 23, 24, 26, 27, 157, 32, 33, 162, 34, 36, 38, 42, 45, 56, 57, 63, 64, 69, 74, 84, 85, 89, 90, 91, 93, 96, 97, 101, 104, 105, 109}
>>> collections.Counter(_)
Counter({0: 1, 2: 1, 133: 1, 5: 1, 6: 1, 134: 1, 137: 1, 138: 1, 143: 1, 144: 1, 19: 1, 148: 1, 22: 1, 23: 1, 24: 1, 26: 1, 27: 1, 157: 1, 32: 1, 33: 1, 162: 1, 34: 1, 36: 1, 38: 1, 42: 1, 45: 1, 56: 1, 57: 1, 63: 1, 64: 1, 69: 1, 74: 1, 84: 1, 85: 1, 89: 1, 90: 1, 91: 1, 93: 1, 96: 1, 97: 1, 101: 1, 104: 1, 105: 1, 109: 1})
>>> (tallies@mod*163)
(23, 56, 137, 0, 56, 89, 144, 0, 33, 85, 104, 137, 26, 69, 22, 74, 93, 143, 162, 90, 133, 36, 69, 84, 105, 138, 5, 24, 57, 148, 6, 32, 91, 157, 27, 42, 63, 96, 19, 38, 64, 97, 134, 27, 34, 90, 109, 2, 45, 101)
>>> collections.Counter(_)
Counter({56: 2, 137: 2, 0: 2, 69: 2, 90: 2, 27: 2, 23: 1, 89: 1, 144: 1, 33: 1, 85: 1, 104: 1, 26: 1, 22: 1, 74: 1, 93: 1, 143: 1, 162: 1, 133: 1, 36: 1, 84: 1, 105: 1, 138: 1, 5: 1, 24: 1, 57: 1, 148: 1, 6: 1, 32: 1, 91: 1, 157: 1, 42: 1, 63: 1, 96: 1, 19: 1, 38: 1, 64: 1, 97: 1, 134: 1, 34: 1, 109: 1, 2: 1, 45: 1, 101: 1})
>>> (tallies@mod*163).index(56)
1
>>> (tallies@mod*163).index(56,2)
4
>>> tallies
[23, 56, 137, 163, 219, 252, 307, 326, 359, 411, 430, 463, 515, 558, 674, 726, 745, 795, 814, 905, 948, 1014, 1047, 1062, 1083, 1116, 1146, 1165, 1198, 1289, 1310, 1336, 1395, 1461, 1494, 1509, 1530, 1563, 1649, 1668, 1694, 1727, 1764, 1820, 1827, 1883, 1902, 1958, 2001, 2057]
>>> 163/26
6.269230769230769
>>> 26*62
1612
>>> 1611/26
61.96153846153846
>>> 1611/13
123.92307692307692
>>> 1611/163
9.883435582822086
>>> pi
Decimal('3.14159265358979323846264338327950288419716939937510582097494459230781640628620')
>>> pi**2
Decimal('9.8696044010893586188344909998761511353136994072407906264133493762200448224191')
>>> 1611/pi/pi
Decimal('163.22842684780614979608981523087122627492198599698919019027615038151289787016')
>>> 1611/sqrt(31)
289.3441415651344
>>> 1611/31
51.96774193548387
>>> 1611/31**3
0.05407673458427042
>>> 1611/31**(1/3)
512.8318335995409
>>> 1611/31**(2/3)
163.2504590645979
>>> 163.25*4
653.0
>>> 653*pi*pi/4
Decimal('1611.2129184778377945247306557297816728399614282320590697619792856679223172599')
>>> 
>>> g1sums=Genesis[1].words()@F(osum)
>>> foursums=[sum(g1sums[i:i+4]) for i in range(len(g1sums))]
>>> Genesis[1].wc()
797
>>> collections.Counter(foursums)
Counter({170: 18, 129: 18, 143: 16, 137: 15, 156: 15, 147: 15, 115: 15, 125: 15, 138: 14, 173: 13, 176: 13, 163: 11, 157: 10, 135: 10, 164: 10, 169: 10, 133: 9, 174: 9, 144: 9, 162: 9, 218: 9, 193: 9, 207: 9, 201: 9, 180: 9, 126: 9, 140: 8, 152: 8, 177: 8, 132: 8, 195: 8, 186: 8, 122: 8, 168: 8, 194: 8, 233: 7, 155: 7, 161: 7, 154: 7, 101: 7, 130: 7, 228: 7, 160: 7, 148: 7, 198: 6, 127: 6, 142: 6, 208: 6, 136: 6, 119: 6, 202: 6, 185: 6, 196: 5, 179: 5, 102: 5, 171: 5, 172: 5, 121: 5, 167: 5, 108: 5, 175: 5, 217: 5, 189: 5, 214: 5, 262: 5, 139: 5, 253: 5, 124: 5, 231: 5, 159: 4, 197: 4, 158: 4, 181: 4, 204: 4, 190: 4, 222: 4, 206: 4, 236: 4, 241: 4, 240: 4, 187: 4, 134: 4, 165: 4, 225: 4, 146: 4, 145: 4, 153: 4, 230: 3, 184: 3, 205: 3, 257: 3, 221: 3, 270: 3, 116: 3, 183: 3, 243: 3, 215: 3, 264: 3, 223: 3, 98: 3, 178: 3, 244: 2, 263: 2, 203: 2, 219: 2, 232: 2, 199: 2, 246: 2, 220: 2, 224: 2, 227: 2, 250: 2, 245: 2, 234: 2, 239: 2, 149: 2, 238: 2, 188: 2, 274: 2, 277: 2, 141: 2, 109: 2, 166: 2, 200: 2, 182: 2, 209: 2, 213: 2, 235: 2, 192: 2, 212: 2, 267: 2, 279: 2, 131: 2, 104: 2, 210: 2, 94: 2, 123: 1, 237: 1, 99: 1, 103: 1, 113: 1, 281: 1, 151: 1, 317: 1, 294: 1, 318: 1, 258: 1, 288: 1, 296: 1, 216: 1, 261: 1, 358: 1, 322: 1, 291: 1, 247: 1, 120: 1, 259: 1, 112: 1, 93: 1, 272: 1, 286: 1, 266: 1, 255: 1, 256: 1, 114: 1, 229: 1, 226: 1, 105: 1, 68: 1, 117: 1, 254: 1, 110: 1, 30: 1})
>>> Genesis[1].count()
34463
>>> divmod(_,163)
(211, 70)
>>> 
>>> (Genesis[1:1]-Genesis[2:3]).count()
37120
>>> _*ns,divmod(_,163)
[2, 2, 2, 2, 2, 2, 2, 2, 5, 29] [1, 1, 1, 1, 1, 1, 1, 1, 3, 10]
(None, (227, 119))
>>> 
>>> 1611/512
3.146484375
>>> 1611*163/512
512.876953125
>>> 
>>> 512/163
3.1411042944785277
>>> 163/3/4/5
2.716666666666667
>>> tells('Heegener number')
Heegener number  =
   8       6     14
   67      73   140
  175     487   662
>>> base12=base(12,...)*(I@str@(Dict['10':'↊','11':'↋']|I)*F(''.join))
>>> base12(11*12+10*144+3)
'↊↋3'
>>> 
>>> Row(g1sums@base12)
'1↋' '29' '69' '22' '48' '29' '47' '17' '29' '44' '17' '29' '44' '37' '98' '44' '17' '42' '17' '77' '37' '56' '29' '13' '19' '29' '26' '17' '29' '77' '19' '22' '4↋' '56' '29' '13' '19' '29' '72' '17' '22' '29' '31' '48' '7' '48' '17' '48' '37' '48' '17' '22' '37' '29' '48' '41' '25' '37' '35' '17' '22' '49' '29' '48' '44' '29' '77' '17' '22' '31' '29' '48' '26' '17' '29' '77' '11' '31' '4↊' '17' '29' '64' '17' '29' '76' '43' '29' '60' '26' '17' '22' '29' '31' '48' '7' '1' '83' '1↋' '29' '55' '19' '29' '72' '17' '31' '25' '45' '29' '72' '44' '29' '72' '17' '22' '1↋' '29' '83' '17' '49' '29' '72' '43' '43' '52' '29' '83' '44' '29' '72' '43' '43' '39' '29' '83' '17' '25' '37' '2↊' '17' '22' '31' '29' '83' '47' '17' '29' '64' '17' '29' '76' '43' '29' '50' '26' '17' '22' '29' '31' '29' '72' '52' '29' '47' '7' '58' '82' '5↊' '2↊' '31' '17' '31' '29' '3↋' '27' '49' '17' '25' '37' '2↊' '17' '22' '31' '29' '3↋' '27' '44' '17' '29' '75' '82' '19' '29' '72' '31' '11' '38' '17' '22' '37' '41' '25' '37' '35' '17' '22' '29' '31' '29' '44' '42' '57' '54' '29' '29' '71' '29' '17' '29' '62' '40' '71' '62' '42' '30' '32' '5↊' '29' '24' '1↋' '5↋' '56' '29' '44' '17' '25' '37' '2↊' '17' '29' '44' '77' '57' '54' '17' '29' '71' '29' '42' '30' '32' '17' '29' '40' '71' '62' '5↊' '29' '37' '1↋' '5↋' '42' '30' '32' '17' '22' '37' '41' '25' '37' '35' '17' '29' '64' '17' '29' '76' '43' '29' '4↋' '26' '17' '22' '29' '31' '48' '7' '63' '1↋' '29' '83' '19' '29' '47' '2↋' '45' '29' '26' '44' '29' '4↊' '17' '31' '3↊' '7' '33' '58' '17' '33' '78' '17' '33' '41' '17' '58' '17' '31' '3↊' '7' '33' '63' '1↋' '29' '83' '19' '29' '47' '2↋' '37' '48' '56' '29' '44' '17' '25' '37' '2↊' '17' '22' '1↋' '4↊' '43' '63' '29' '62' '48' '2↋' '48' '29' '26' '17' '29' '66' '48' '2↋' '48' '29' '4↊' '11' '1↋' '29' '65' '3↋' '17' '22' '38' '3↊' '1↋' '29' '83' '19' '29' '47' '2↋' '37' '48' '56' '29' '44' '17' '2↋' '48' '50' '29' '26' '17' '50' '29' '4↊' '17' '2↋' '45' '29' '48' '44' '29' '77' '17' '22' '37' '41' '25' '37' '35' '17' '29' '64' '17' '29' '76' '43' '29' '74' '26' '17' '22' '29' '31' '29' '72' '42' '57' '96' '29' '68' '77' '41' '31' '28' '17' '48' '41' '33' '37' '39' '29' '44' '1↋' '29' '42' '83' '19' '47' '17' '22' '48' '43' '58' '17' '63' '61' '77' '41' '6↋' '43' '29' '72' '77' '57' '96' '42' '50' '32' '17' '63' '52' '48' '42' '30' '32' '17' '22' '37' '41' '25' '37' '35' '17' '22' '56' '3↊' '63' '7' '95' '17' '↊8' '17' '33' '29' '72' '1↋' '29' '38' '17' '31' '48' '↊8' '1↋' '29' '44' '17' '29' '64' '17' '29' '76' '43' '29' '41' '26' '17' '22' '29' '31' '29' '44' '42' '57' '29' '61' '77' '42' '30' '32' '51' '17' '65' '4↊' '17' '3↋' '19' '29' '44' '42' '30' '32' '17' '25' '37' '2↊' '17' '22' '1↋' '29' '3↋' '19' '29' '44' '42' '30' '32' '17' '51' '42' '50' '32' '17' '63' '4↊' '41' '68' '56' '29' '44' '42' '30' '32' '17' '22' '37' '41' '25' '37' '35' '17' '22' '29' '31' '34' '26' '24' '1↋' '46' '2↋' '42' '46' '7↊' '17' '31' '3↊' '30' '79' '50' '29' '36' '19' '29' '21' '17' '50' '29' '48' '19' '29' '24' '17' '50' '29' '51' '17' '50' '21' '29' '44' '17' '50' '63' '65' '4↊' '41' '68' '56' '29' '44' '2↊' '22' '48' '24' '1↋' '30' '44' '2↋' '1↋' '29' '2↋' '19' '22' '48' '11' '26' '27' '17' '36' '48' '11' '3↊' '17' '22' '56' '3↊' '17' '22' '29' '5↊' '3↊' '7' '95' '17' '↊8' '17' '8↊' '29' '44' '17' '60' '25' '17' '30' '79' '50' '29' '36' '19' '29' '21' '17' '50' '29' '48' '19' '29' '24' '17' '50' '63' '61' '4↊' '41' '6↋' '56' '29' '44' '17' '22' '29' '3↊' '9' '30' '49' '51' '63' '29' '48' '29' '43' '24' '56' '29' '13' '19' '21' '29' '44' '17' '63' '40' '1↋' '29' '43' '24' '29' '62' '19' '1' '40' '71' '29' '2↋' '51' '25' '44' '7' '33' '33' '17' '2↋' '63' '3↋' '19' '29' '44' '17' '2↋' '63' '48' '19' '29' '24' '17' '2↋' '63' '4↊' '41' '68' '56' '29' '44' '6↊' '48' '24' '28' '9' '30' '49' '63' '41' '29' '33' '33' '17' '25' '37' '2↊' '17' '22' '37' '63' '4↊' '41' '11' '11' '1↋' '17' '3↊' '25' '37' '5↊' '35' '17' '29' '64' '17' '29' '76' '43' '29' '68' '26'
>>> base12(117)
'99'
>>> 
>>> base12(163)
'117'
>>> 
>>> int('171',12)
229
>>> int('711',12)
1021
>>> 229*1021*ns
[229, 1021] [50, 172]
>>> [229,1021]@base12
['171', '711']
>>> 
>>> b/'shutteth'
Job 12:14;Proverbs 16:30;17:28;Isaiah 33:15;Lamentations 3:8;1 John 3:17;Revelation 3:7 (7 verses)
>>> Revelation[3:7].tells()
And  to the angel of the church in Philadelphia write; These things saith he that  is holy, he that  is true, he that hath the key of David, he that openeth, and  no man shutteth; and shutteth, and  no man openeth;   =
 3   2   3    5   2   3    6    2       12        5      5     6      5   2   4    2    4   2   4    2    4   2   4    4    3   3  2    5    2   4      7      3   2   3      8      3      8      3   2   3     7      161
 19  35  33   39  21  33   61   23     101        75     57    77     57  13  49   28   60  13  49   28   64  13  49   37   33  41 21   40   13  49     83     19  29  28    121     19    121     19  29  28    83     1810
 55 260 213   93  66 213  412   59     245       804    318   374    318  13 409  109  798  13 409  109  595  13 409  217  213 725 66  418   13 409    398     55 110  91    1021    55    1021    55 110  91   398    11773
>>> Revelation[3:7].words()@osum@base12
['17', '2↋', '29', '33', '19', '29', '51', '1↋', '85', '63', '49', '65', '49', '11', '41', '24', '50', '11', '41', '24', '54', '11', '41', '31', '29', '35', '19', '34', '11', '41', '6↋', '17', '25', '24', '↊1', '17', '↊1', '17', '25', '24', '6↋']
>>> Genesis[1:1].words()@osum@base12
['1↋', '29', '69', '22', '48', '29', '47', '17', '29', '44']
>>> Genesis[1:1].words()@osum*F(tale)@base12
['1↋', '48', '↋5', '117', '163', '190', '217', '232', '25↋', '2↊3']
>>> 
>>> base(33,1189)
[1, 3, 1]
>>> 
>>> pi
Decimal('3.14159265358979323846264338327950288419716939937510582097494459230781640628620')
>>> pi=math.pi
>>> e
2.718281828459045
>>> 163*(pi-e)
68.99966449631192
>>> 69-_
0.0003355036880776652
>>> 69/(pi-e)
163.0007925705372
>>> 
>>> b/q.log
Leviticus 14:10,12,15,21,24 (5 verses)
>>> _.tells()
And  on the eighth day he shall take two he lambs without blemish, and one ewe lamb of the first year without blemish, and three tenth deals of fine flour for a meat offering, mingled with oil, and one log of oil.   =
 3   2   3    6     3  2    5    4    3  2    5      7       7      3   3   3   4   2   3    5    4      7       7      3    5     5     5   2   4     5    3  1  4       8        7     4    3    3   3   3  2   3    166
 19  29  33   57    30 13   52   37   58 13   47    116      68     19  34  33  28  21  33   72   49    116      68     19   56    67    41  21  34    72   39 1  39      80       64    60   36   19  34  34 21  36   1818
 55 110 213  237   705 13  169  226  760 13  173    1277    194     55 115 510  73  66 213  405  796    1277    194     55  308   463   140  66  70   486  156 1 246     233      145   717   99   55 115  97 66  99  11466
And the priest shall take one he lamb, and offer him for a trespass offering, and the log of oil, and wave them for a wave offering before the LORD:  =
 3   3    6      5    4    3  2    4    3    5    3   3  1    8         8      3   3   3  2   3    3   4    4    3  1  4      8       6     3    4   115
 19  33   87     52   37   34 13   28   19   50   30  39 1   117        80     19  33  34 21  36   19  51   46   39 1  51     80      51    33   49  1202
 55 213  474    169  226  115 13   73   55  167   57 156 1   666       233     55 213  97 66  99   55 906  253  156 1 906    233     168   213  184  6278
And the priest shall take some of the log of oil, and pour  it into the palm of his own left hand:  =
 3   3    6      5    4    4   2   3   3  2   3    3   4    2   4    3   4   2   3   3   4     4    74
 19  33   87     52   37   52  21  33  34 21  36   19  70   29  58   33  42  21  36  52  43    27  855
 55 213  474    169  226  205  66 213  97 66  99   55 520  209 319  213 141  66 117 610 241    63  4437
And if he be poor, and cannot get  so much; then he shall take one lamb for a trespass offering  to be waved,  to make an atonement for him, and one tenth deal of fine flour mingled with oil for a meat offering, and a log of oil;  =
 3  2  2  2    4    3    6     3   2    4    4   2    5    4    3   4    3  1    8        8      2  2    5     2   4   2      9      3   3    3   3    5    4   2   4     5      7     4    3   3  1  4       8      3  1  3  2   3   173
 19 15 13 7    64   19   67    32  34   45   47  13   52   37   34  28   39 1   117       80     35 7    55    35  30  15    107     39  30   19  34   67   22  21  34    72     64    60   36  39 1  39      80     19 1  34 21  36  1815
 55 15 13 7   280   55  364   212 160  351  263  13  169  226  115  73  156 1   666      233    260 7   910   260  66  51    611    156  57   55 115  463   40  66  70   486    145   717   99 156 1 246     233     55 1  97 66  99  9015
And the priest shall take the lamb of the trespass offering, and the log of oil, and the priest shall wave them for a wave offering before the LORD:  =
 3   3    6      5    4    3   4   2   3     8         8      3   3   3  2   3    3   3    6      5    4    4    3  1  4      8       6     3    4   117
 19  33   87     52   37   33  28  21  33   117        80     19  33  34 21  36   19  33   87     52   51   46   39 1  51     80      51    33   49  1275
 55 213  474    169  226  213  73  66 213   666       233     55 213  97 66  99   55 213  474    169  906  253  156 1 906    233     168   213  184  7062
>>> tells('log of oil')
log of oil  =
 3  2   3   8
 34 21  36  91
 97 66  99 262
>>> log(36)
3.58351893845611
>>> log(3)
1.0986122886681098
>>> log(99)
4.59511985013459
>>> 40+30+3
73
>>> 5*log(99)
22.97559925067295
>>> 
>>> 5*log(36)
17.91759469228055
>>> log(99)**5
2048.7275886800735
>>> log(36)**5
590.9469833585079
>>> log(2048)/log(2)
11.0
>>> log(2)/5
0.13862943611198905
>>> log(2048)/55
0.13862943611198905
>>> 5*log(log(99))
7.624974190976889
>>> exp(5*log(log(99))) 
2048.7275886800735
>>> 
>>> fbase(23,e)
<generator object fbase at 0xb58e0eb0>
>>> firstn(10,_)
[2, 16, 11, 22, 7, 16, 5, 0, 15, 1]
>>> Fn(163)
5193981023518054650172215742431232
>>> nF(_)
163
>>> Fn(161)+Fn(162)==Fn(163)
False
>>> tri(163)
13366
>>> 163**2
26569
>>> 163**3
4330747
>>> 
>>> int('117',12)
163
>>> int('171',12) 
229
>>> int('711',12)
1021
>>> base(12,3088286401)
[7, 2, 2, 3, 1, 6, 9, 4, 1]
>>> 99*pi
311.01767270538954
>>> 
>>> log(99**5)
22.97559925067295
>>> log(99**5)/log(2)
33.146783100398046
>>> 5*log(99)/log(2)-30
3.1467831003980464
>>> 2**(30+pi)
9475747788.804472
>>> 99**5
9509900499
>>> 
>>> 5*(log(99)/log(2)-6)
3.1467831003980473
>>> 99<<30
106300440576
>>> pi*(1<<30)
3373259426.1305046
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
