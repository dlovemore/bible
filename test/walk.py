# >>> from bible import *
# >>> q.walk&F(tell)
# w  a l  k  =
# 23 1 12 11 47
# >>> span(30)*L@(I+F(Fn))&p
# [(1, 1), (2, 1), (3, 2), (4, 3), (5, 5), (6, 8), (7, 13), (8, 21), (9, 34), (10, 55), (11, 89), (12, 144), (13, 233), (14, 377), (15, 610), (16, 987), (17, 1597), (18, 2584), (19, 4181), (20, 6765), (21, 10946), (22, 17711), (23, 28657), (24, 46368), (25, 75025), (26, 121393), (27, 196418), (28, 317811), (29, 514229), (30, 832040)]
# >>> fs(17711)
# [89, 199]
# >>> 89*199
# 17711
# >>> np(199)
# 46
# >>> 
# >>> divmod(31102,1123)
# (27, 781)
# >>> divmod(31102,1189)
# (26, 188)
# >>> base(33,1123)
# [1, 1, 1]
# >>> base(33,1189)
# [1, 3, 1]
# >>> 
# >>> X[0]*F(fs)
# Func(compose)
# >>> _((100,))
# [2, 2, 5, 5]
# >>> 
# >>> 
# >>> 
# >>> span(30)*L@(I+F(Fn))
# [(1, 1), (2, 1), (3, 2), (4, 3), (5, 5), (6, 8), (7, 13), (8, 21), (9, 34), (10, 55), (11, 89), (12, 144), (13, 233), (14, 377), (15, 610), (16, 987), (17, 1597), (18, 2584), (19, 4181), (20, 6765), (21, 10946), (22, 17711), (23, 28657), (24, 46368), (25, 75025), (26, 121393), (27, 196418), (28, 317811), (29, 514229), (30, 832040)]
# >>> [1,2,30]*X[2]*F(npf)
# {2: 1, 3: 2, 5: 3}
# >>> span(27)*L@(I+F(Fn))@(X[0]+X[1]+X[1]*F(fs))@(X[:]+X[2]@F(np))**p
# (1, 1, []) []
# (2, 1, []) []
# (3, 2, [2]) [1]
# (4, 3, [3]) [2]
# (5, 5, [5]) [3]
# (6, 8, [2, 2, 2]) [1, 1, 1]
# (7, 13, [13]) [6]
# (8, 21, [3, 7]) [2, 4]
# (9, 34, [2, 17]) [1, 7]
# (10, 55, [5, 11]) [3, 5]
# (11, 89, [89]) [24]
# (12, 144, [2, 2, 2, 2, 3, 3]) [1, 1, 1, 1, 2, 2]
# (13, 233, [233]) [51]
# (14, 377, [13, 29]) [6, 10]
# (15, 610, [2, 5, 61]) [1, 3, 18]
# (16, 987, [3, 7, 47]) [2, 4, 15]
# (17, 1597, [1597]) [251]
# (18, 2584, [2, 2, 2, 17, 19]) [1, 1, 1, 7, 8]
# (19, 4181, [37, 113]) [12, 30]
# (20, 6765, [3, 5, 11, 41]) [2, 3, 5, 13]
# (21, 10946, [2, 13, 421]) [1, 6, 82]
# (22, 17711, [89, 199]) [24, 46]
# (23, 28657, [28657]) [3121]
# (24, 46368, [2, 2, 2, 2, 2, 3, 3, 7, 23]) [1, 1, 1, 1, 1, 2, 2, 4, 9]
# (25, 75025, [5, 5, 3001]) [3, 3, 431]
# (26, 121393, [233, 521]) [51, 98]
# (27, 196418, [2, 17, 53, 109]) [1, 7, 16, 29]
# [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
# >>> 
# >>> 
# >>> 
# >>> span(30)*L@(I+F(Fn))*(X[0]+X[1]+X[1]*F(fs))
# >>> 
# >>> 
# >>> 
# >>> span(30)*L@(I+F(Fn))*(X[0]+X[1]+X[1]*F(fs))*p
# <console>:1: TypeError: isinstance() arg 2 must be a type or tuple of types
# /home/pi/python/parle/func.py:70: TypeError: isinstance() arg 2 must be a type or tuple of types
#     self=FuncRow(__call__)
#     other=Func(compose)
# >>> 
# >>> 
# >>> span
# <function span at 0xb64a9228>
# >>> dir(span)
# ['__annotations__', '__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__get__', '__getattribute__', '__globals__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__kwdefaults__', '__le__', '__lt__', '__module__', '__name__', '__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
# >>> span.__name__
# 'span'
# >>> span
# <function span at 0xb64a9228>
# >>> p(span)
# <function span at 0xb64a9228>
# >>> 
